import React, { useEffect, useState } from "react";
import { FaShieldAlt, FaShoppingCart, FaWallet } from "react-icons/fa";
import { useNavigate, useParams } from "react-router-dom"; // Import useParams ƒë·ªÉ l·∫•y params t·ª´ URL
import ProductRelative from "./ProductRelative";

interface Product {
  _id: string;
  name: string;
  price: string;
  image: [string];
  description: string;
  stock: number;
  discount: number;  // Th√™m thu·ªôc t√≠nh discount
}

const ProductDetails: React.FC = () => {
  const { id } = useParams<{ id: any }>(); // L·∫•y productId t·ª´ URL
  const [product, setProduct] = useState<Product | null>(null);
  const [loading, setLoading] = useState<boolean>(true);
  const [error, setError] = useState<string | null>(null);
  const [quantity, setQuantity] = useState<number>(1); // S·ªë l∆∞·ª£ng m·∫∑c ƒë·ªãnh l√† 1
  const navigate = useNavigate();


  const handleBuyNow = () => {
    if (!product) return;
    navigate(`/checkout?productId=${product._id}&quantity=${quantity}`);
  };
  const fetchProductDetails = async (id: any) => { // ‚úÖ Nh·∫≠n id l√†m tham s·ªë
    setLoading(true);
    try {
      const response = await fetch('http://localhost:8080/api/product/get-product-details', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ id }), // ‚úÖ Truy·ªÅn id v√†o body
      });
  
      if (!response.ok) {
        throw new Error('Kh√¥ng th·ªÉ t·∫£i d·ªØ li·ªáu s·∫£n ph·∫©m');
      }
  
      const data = await response.json();
      console.log("üî• API tr·∫£ v·ªÅ chi ti·∫øt s·∫£n ph·∫©m:", data);
      if (data.success) {
        setProduct(data.data);
      } else {
        setError('S·∫£n ph·∫©m kh√¥ng t√¨m th·∫•y');
      }
    } catch (error: any) {
      setError(error.message || 'L·ªói khi l·∫•y d·ªØ li·ªáu s·∫£n ph·∫©m');
    } finally {
      setLoading(false);
    }
  };
  
  // G·ªçi API m·ªói khi id thay ƒë·ªïi
  useEffect(() => {
    if (id) {
      fetchProductDetails(id);
    }
  }, [id]); // ‚úÖ Theo d√µi id
  

  const handleAddToCart = async () => {
    if (!product) return;
    console.log(localStorage.getItem("accessToken"))
    try {
      const response = await fetch("http://localhost:8080/api/cart/create", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${localStorage.getItem("accessToken")}`, // N·∫øu c√≥ ƒëƒÉng nh·∫≠p
        },
        body: JSON.stringify({
          productId: product._id,
          quantity: quantity,
        }),
      });

      const data = await response.json();
  
      if (data.success) {
        console.log("‚úÖ Th√™m v√†o gi·ªè h√†ng th√†nh c√¥ng!", data.cart);

         // L·∫•y gi·ªè h√†ng t·ª´ localStorage
        let cart = JSON.parse(localStorage.getItem("cart") || "[]");

         // Ki·ªÉm tra xem s·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng ch∆∞a
        const existingItem = cart.find((item: any) => item.productId === product._id);

        if (!existingItem) {
          cart.push({ productId: product._id, quantity }); // Ch·ªâ th√™m n·∫øu ch∆∞a c√≥
        } else {
          console.log("üîπ S·∫£n ph·∫©m ƒë√£ c√≥ trong gi·ªè h√†ng, kh√¥ng tƒÉng s·ªë l∆∞·ª£ng!");
        }
        // L∆∞u l·∫°i v√†o localStorage
        localStorage.setItem("cart", JSON.stringify(cart));

        // K√≠ch ho·∫°t s·ª± ki·ªán ƒë·ªÉ c·∫≠p nh·∫≠t Header
        window.dispatchEvent(new Event("storage"));

        navigate("/cart"); // Chuy·ªÉn h∆∞·ªõng ƒë·∫øn gi·ªè h√†ng
      } else {
        alert(data.message);
        console.error("‚ö†Ô∏è L·ªói khi th√™m v√†o gi·ªè h√†ng:", data.message);
      }
    } catch (error) {
      console.error("‚ùå L·ªói k·∫øt n·ªëi API:", error);
    }
  };

  
  // H√†m tƒÉng s·ªë l∆∞·ª£ng
  const increaseQuantity = () => {
    if (quantity < (product?.stock || 1)) {
      setQuantity(quantity + 1);
    }else{
      alert("S·∫£n ph·∫©m ƒë√£ h·∫øt h√†ng.");
    }
  };

  // H√†m gi·∫£m s·ªë l∆∞·ª£ng
  const decreaseQuantity = () => {
    if (quantity > 1) {
      setQuantity(quantity - 1);
    }
  };

  if (loading) {
    return <div>ƒêang t·∫£i d·ªØ li·ªáu...</div>;
  }

  if (error) {
    return <div>{error}</div>;
  }

  if (!product) {
    return <div>Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m.</div>;
  }

  // T√≠nh gi√° sau khi gi·∫£m gi√°
  const discountedPrice = product.discount
    ? (parseFloat(product.price) * (1 - product.discount / 100)).toFixed(2)
    : product.price;

  return (
    <div className="container mx-auto p-4">
      {/* Breadcrumb */}
      <div className="text-sm text-gray-500 mb-4">
        <span className="text-gray-400">Home</span> &gt; <span className="font-semibold">{product.name}</span>
      </div>
      <div className="flex">
        <div className="w-1/2">
          <img
            src={product.image[0]}
            alt={product.name}
            className="w-full h-96 object-cover mb-4"
          />
        </div>
        <div className="w-1/2 pl-8">
          <h1 className="text-3xl font-bold mb-4">{product.name}</h1>
          <p className="text-lg text-gray-700 mb-4">{product.description}</p>
          
          {/* Hi·ªÉn th·ªã gi√° v√† gi·∫£m gi√° */}
          <div className="mb-4">
            {product.discount ? (
              <p className="text-xl text-red-500 font-bold mb-4">
                {discountedPrice} VNƒê
                <span className="text-gray-500 line-through ml-2">{product.price} VNƒê</span>
              </p>
            ) : (
              <p className="text-xl text-red-500 font-bold mb-4">{product.price} VNƒê</p>
            )}
          </div>

          <p className="mb-4">C√≤n l·∫°i: {product.stock} s·∫£n ph·∫©m</p>
          
          {/* Ph·∫ßn s·ªë l∆∞·ª£ng */}
          <div className="flex items-center mb-4">
            <button 
              onClick={decreaseQuantity} 
              className="p-2 bg-gray-300 text-gray-700 rounded-l"
              disabled={quantity <= 1}
            >
              -
            </button>
            <input
              type="number"
              value={quantity}
              readOnly // Ch·ªâ ƒë·ªçc, kh√¥ng cho thay ƒë·ªïi tr·ª±c ti·∫øp
              className="p-2 w-16 text-center border border-gray-300"
              min="1"
              max={product.stock}
            />
            <button 
              onClick={increaseQuantity} 
              className="p-2 bg-gray-300 text-gray-700 rounded-r"
              disabled={quantity >= product.stock}
            >
              +
            </button>
          </div>
          <div className="flex">
            <button onClick={handleAddToCart} className="p-3 bg-green-500 text-white rounded-md flex">
              <FaShoppingCart className="mr-2" />Add To Cart
            </button>
            <button onClick={handleBuyNow} className="p-3 mx-5 bg-black text-white rounded-md flex">
              <FaShoppingCart className="mr-2" />
              Buy Now
            </button>
          </div>
          <div className="bg-gray-100 p-4 rounded-md text-gray-700 my-4">
             <div className="flex items-center gap-2">
                <FaWallet className="text-xl" />
                <p className="text-sm">
                  <strong>Payment.</strong> Thanh to√°n khi nh·∫≠n h√†ng, qu√©t m√£ QR, ho·∫∑c thanh to√°n online v·ªõi -5% ∆∞u ƒë√£i.
                </p>
              </div>
              <hr className="my-2" />
              <div className="flex items-center gap-2">
                <FaShieldAlt className="text-xl" />
                  <p className="text-sm">
                  <strong>Warranty.</strong> Ch√≠nh s√°ch b·∫£o h√†nh theo quy ƒë·ªãnh c·ªßa nh√† s·∫£n xu·∫•t.
                  </p>
                </div>
            </div>
          </div>
      </div>
      <ProductRelative currentProductId={id!} />
    </div>
  );
};

export default ProductDetails;
